{"ast":null,"code":"export const extractEvolutionChain = response => {\n  let evoChain = [];\n  let evoData = response.chain;\n\n  do {\n    evoChain.push({\n      \"name\": evoData.species.name,\n      \"url\": evoData.species.url\n    });\n    evoData = evoData['evolves_to'][0];\n  } while (evoData && evoData.hasOwnProperty('evolves_to'));\n\n  return evoChain;\n};\nexport const getImageSourceFromURL = id => {\n  return \"https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/\" + getIDStringfromURL(id) + \".png\";\n};\nexport const getIDStringfromURL = url => {\n  const tempURL = url.split(\"/\");\n  const id = +tempURL[tempURL.length - 2];\n  if (id >= 10 && id < 100) return '0' + id;\n  if (id >= 100) return '' + id;else return '00' + id;\n};\nexport const getImageSourcefromID = id => {\n  return \"https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/\" + getIDStringfromID(id) + \".png\";\n};\nexport const getIDStringfromID = id => {\n  if (id >= 10 && id < 100) return '0' + id;\n  if (id >= 100) return '' + id;else return '00' + id;\n};\nexport const getFlavorSpeech = (pokemonSpeciesData, pokemonData) => {\n  const enLang = pokemonSpeciesData.flavor_text_entries.filter(entry => entry.language.name === \"en\")[0];\n  const types = pokemonData.types.map(type => type.type.name).join(\" and \");\n  const legend = pokemonSpeciesData.is_legendary ? \" legendary, \" : \"\";\n  const mythic = pokemonSpeciesData.is_mythical ? \" mythical, \" : \"\";\n  const text = pokemonData.name + \", \" + legend + mythic + types + \" type pokemon. \" + enLang.flavor_text.replace(/\\r?\\n|\\r/g, \" \");\n  return text;\n};\nexport const shuffle = array => {\n  let m = array.length,\n      t,\n      i;\n\n  while (m) {\n    i = Math.floor(Math.random() * m--);\n    t = array[m];\n    array[m] = array[i];\n    array[i] = t;\n  }\n\n  return array;\n};","map":{"version":3,"sources":["C:/Users/HRV/Desktop/Programmes/REACT/poke-decks/functions/GlobalFunctions.ts"],"names":["extractEvolutionChain","response","evoChain","evoData","chain","push","species","name","url","hasOwnProperty","getImageSourceFromURL","id","getIDStringfromURL","tempURL","split","length","getImageSourcefromID","getIDStringfromID","getFlavorSpeech","pokemonSpeciesData","pokemonData","enLang","flavor_text_entries","filter","entry","language","types","map","type","join","legend","is_legendary","mythic","is_mythical","text","flavor_text","replace","shuffle","array","m","t","i","Math","floor","random"],"mappings":"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","sourcesContent":["import { GetPokemonDataInterface, GetPokemonEvolutionChainInterface, GetPokemonSpeciesDataInterface } from \"../InterfacesProps/Interfaces\";\r\n\r\nexport const extractEvolutionChain = (response: GetPokemonEvolutionChainInterface) => {\r\n    let evoChain = [];\r\n    let evoData = response.chain;\r\n\r\n    do {\r\n    evoChain.push({\r\n        \"name\": evoData.species.name,\r\n        \"url\": evoData.species.url,\r\n    });\r\n    evoData = evoData['evolves_to'][0];\r\n    } while (evoData && evoData.hasOwnProperty('evolves_to'));\r\n\r\n    return evoChain\r\n}\r\n\r\n\r\n\r\nexport const getImageSourceFromURL = (id: string) => {\r\n    return \"https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/\" + getIDStringfromURL(id) + \".png\"\r\n  }\r\n\r\nexport const getIDStringfromURL = (url: string) => {\r\n    const tempURL = url.split(\"/\")\r\n    const id = +tempURL[tempURL.length - 2]\r\n    if(id >= 10 && id < 100) return '0' + id\r\n    if(id >= 100 ) return '' + id\r\n    else return '00' + id\r\n}\r\n\r\nexport const getImageSourcefromID = (id: number) => {\r\n    return \"https://raw.githubusercontent.com/HybridShivam/Pokemon/master/assets/images/\" + getIDStringfromID(id) + \".png\"\r\n  }\r\n  \r\nexport const getIDStringfromID = (id: number) => {\r\n  if(id >= 10 && id < 100) return '0' + id\r\n  if(id >= 100 ) return '' + id\r\n  else return '00' + id\r\n}\r\n\r\n\r\n\r\n\r\nexport const getFlavorSpeech = (pokemonSpeciesData: GetPokemonSpeciesDataInterface, pokemonData: GetPokemonDataInterface) => {\r\n    const enLang = pokemonSpeciesData.flavor_text_entries.filter((entry) => entry.language.name === \"en\")[0]\r\n    const types = pokemonData.types.map(type => type.type.name).join(\" and \")\r\n    const legend = pokemonSpeciesData.is_legendary ? \" legendary, \" : \"\"\r\n    const mythic = pokemonSpeciesData.is_mythical ? \" mythical, \" : \"\"\r\n    const text = pokemonData.name + \", \" + legend + mythic + types + \" type pokemon. \" + enLang.flavor_text.replace(/\\r?\\n|\\r/g, \" \")\r\n    return text\r\n}\r\n\r\nexport const shuffle = (array: []) => {\r\n    let m = array.length, t, i;\r\n  \r\n    while (m) {\r\n      i = Math.floor(Math.random() * m--);\r\n      t = array[m];\r\n      array[m] = array[i];\r\n      array[i] = t;\r\n    }\r\n  \r\n    return array;\r\n  }"]},"metadata":{},"sourceType":"module"}