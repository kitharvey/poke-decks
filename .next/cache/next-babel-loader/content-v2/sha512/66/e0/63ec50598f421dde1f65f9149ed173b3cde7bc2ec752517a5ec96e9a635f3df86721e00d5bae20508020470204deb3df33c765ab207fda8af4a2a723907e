{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HRV\\\\Desktop\\\\Programmes\\\\REACT\\\\poke-decks\\\\components\\\\deck\\\\FramerCard.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { motion, useMotionValue, useTransform } from \"framer-motion\";\nimport Card from \"./Card\";\n\nconst getID = url => {\n  const tempURL = url.split(\"/\");\n  return +tempURL[tempURL.length - 2];\n};\n\nconst EndCard = () => {\n  return __jsx(\"div\", {\n    className: \"h-full w-full bg-white p-4 flex flex-col items-center justify-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"text-2xl font-bold text-gray-500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"End of the Deck\"), __jsx(\"img\", {\n    src: \"/colored-logo.png\",\n    draggable: \"false\",\n    onDragStart: e => e.preventDefault(),\n    className: \"w-auto\",\n    alt: \"poke-logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"text-2xl font-bold text-gray-500\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"Swipe to Reload\"));\n};\n\nconst FramerCard = props => {\n  const x = useMotionValue(0);\n  const maximumX = 100;\n  const rotate = useTransform(x, [-maximumX, 0, maximumX], [-5, 0, 5], {\n    clamp: false\n  });\n  const {\n    initial,\n    animate,\n    transition,\n    exitX,\n    index,\n    drag,\n    setExitX,\n    setIndex,\n    pokeArray,\n    length,\n    whileHover,\n    whileTap\n  } = props;\n\n  function handleDragEnd(event, info) {\n    if (info.offset.x < -maximumX) {\n      if (setExitX) setExitX(-maximumX * 5);\n      if (setIndex) setIndex(index + 1);\n    }\n\n    if (info.offset.x > maximumX) {\n      if (setExitX) setExitX(maximumX * 5);\n      if (setIndex) setIndex(index + 1);\n    }\n  }\n\n  return __jsx(motion.div, {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      position: \"absolute\",\n      top: 0,\n      borderRadius: \"10px\",\n      x: x,\n      rotate: rotate,\n      cursor: \"grab\"\n    },\n    whileHover: whileHover,\n    whileTap: whileTap,\n    drag: drag,\n    dragConstraints: {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    },\n    onDragEnd: handleDragEnd,\n    initial: initial,\n    animate: animate,\n    transition: transition,\n    exit: {\n      x: exitX,\n      opacity: 0,\n      transition: {\n        duration: 0.2\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, pokeArray && index < length ? __jsx(Card, {\n    id: getID(pokeArray[index].url),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 15\n    }\n  }) : __jsx(EndCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 15\n    }\n  }));\n};\n\nexport default FramerCard;","map":{"version":3,"sources":["C:/Users/HRV/Desktop/Programmes/REACT/poke-decks/components/deck/FramerCard.tsx"],"names":["React","motion","useMotionValue","useTransform","Card","getID","url","tempURL","split","length","EndCard","e","preventDefault","FramerCard","props","x","maximumX","rotate","clamp","initial","animate","transition","exitX","index","drag","setExitX","setIndex","pokeArray","whileHover","whileTap","handleDragEnd","event","info","offset","width","height","position","top","borderRadius","cursor","right","bottom","left","opacity","duration"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  motion,\r\n  useMotionValue,\r\n  PanInfo,\r\n  useTransform\r\n} from \"framer-motion\";\r\nimport Card from \"./Card\";\r\nimport { NameURLInterface } from \"../../InterfacesProps/Interfaces\";\r\n\r\ninterface CardProps {\r\n    key?: number\r\n    initial?: InitialProps\r\n    animate?: AnimateProps\r\n    transition?: TransitionProps\r\n    exitX?: number\r\n    index: number\r\n    drag?: boolean | \"x\" | \"y\"\r\n    setExitX?: (x: number) => void\r\n    setIndex?: (x: number) => void\r\n    pokeArray?: NameURLInterface[] | undefined | null\r\n    length: number\r\n    whileHover?: {\r\n      scale: number,\r\n      boxShadow: string\r\n    }\r\n    whileTap?: {\r\n      cursor?: string,\r\n      scale?: number,\r\n      boxShadow?: string\r\n     }\r\n  }\r\n  \r\n  interface TransitionProps {\r\n      scale?: { duration: number },\r\n      opacity?: { duration: number},\r\n      type?: \"inertia\" | \"spring\" | \"tween\",\r\n      stiffness?: number,\r\n      damping?: number,\r\n  }\r\n  \r\n  interface AnimateProps {\r\n      scale: number,\r\n      y: number,\r\n      opacity: number,\r\n      boxShadow: string\r\n  }\r\n  interface InitialProps {\r\n      scale: number,\r\n      y: number,\r\n      opacity: number\r\n  }\r\n\r\n  const getID = (url: string) => {\r\n    const tempURL = url.split(\"/\")\r\n    return +tempURL[tempURL.length - 2]\r\n  }\r\n\r\n  const EndCard: React.FC = () => {\r\n    return (\r\n    <div className=\"h-full w-full bg-white p-4 flex flex-col items-center justify-around\" >\r\n      <div className=\"text-2xl font-bold text-gray-500\" >End of the Deck</div>\r\n      <img src='/colored-logo.png' draggable=\"false\" onDragStart={ e => e.preventDefault()} className=\"w-auto\" alt=\"poke-logo\" />\r\n      <div className=\"text-2xl font-bold text-gray-500\">Swipe to Reload</div>\r\n    </div>\r\n    )\r\n  }\r\n\r\n\r\n  \r\n  const FramerCard: React.FC<CardProps> = (props) => {\r\n    const x = useMotionValue(0);\r\n    const maximumX = 100\r\n    const rotate = useTransform(x, [-maximumX, 0, maximumX], [-5, 0, 5], {\r\n      clamp: false,\r\n    })\r\n\r\n    const {\r\n      initial,\r\n      animate,\r\n      transition,\r\n      exitX,\r\n      index,\r\n      drag,\r\n      setExitX,\r\n      setIndex,\r\n      pokeArray,\r\n      length,\r\n      whileHover,\r\n      whileTap\r\n    } = props\r\n    \r\n \r\n  \r\n    function handleDragEnd(event: MouseEvent | TouchEvent | PointerEvent, info: PanInfo) {\r\n        if (info.offset.x < -maximumX) {\r\n          if(setExitX) setExitX(-maximumX*5);\r\n          if(setIndex) setIndex(index + 1);\r\n        }\r\n        if (info.offset.x > maximumX) {\r\n          if(setExitX) setExitX(maximumX*5);\r\n          if(setIndex) setIndex(index + 1);\r\n        }\r\n    }\r\n\r\n\r\n  \r\n    return (\r\n      <motion.div\r\n\r\n        style={{\r\n          width: \"100%\",\r\n          height: \"100%\",\r\n          position: \"absolute\",\r\n          top: 0,\r\n          borderRadius: \"10px\",\r\n          x: x,\r\n          rotate: rotate,\r\n          cursor: \"grab\",\r\n        }}\r\n        whileHover={whileHover}\r\n        whileTap={whileTap}\r\n        drag={drag}\r\n        dragConstraints={{\r\n          top: 0,\r\n          right: 0,\r\n          bottom: 0,\r\n          left: 0\r\n        }}\r\n        onDragEnd={handleDragEnd}\r\n        initial={initial}\r\n        animate={animate}\r\n        transition={transition}\r\n        exit={{\r\n          x: exitX,\r\n          opacity: 0,\r\n          transition: { duration: 0.2 }\r\n        }}\r\n      >\r\n          {(pokeArray && (index < length))\r\n            ? <Card  id={getID(pokeArray[index].url)}/> \r\n            : <EndCard />\r\n          }\r\n      </motion.div>\r\n    );\r\n  }\r\n\r\nexport default FramerCard"]},"metadata":{},"sourceType":"module"}